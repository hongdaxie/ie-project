{"version":3,"sources":["requests/index.js","views/Vaccinations/GoogleMap.js","views/Vaccinations/index.js"],"names":["service","axios","create","baseURL","getHospitalsBySuburb","suburb","get","getSuburbList","MapMarker","icon","faMapMarkerAlt","style","fontSize","color","GoogleMap","state","zoom","this","setState","center","lat","props","item","latitude","lng","longitude","name","height","width","margin","marginBottom","bootstrapURLKeys","key","defaultCenter","defaultZoom","Component","Search","Vaccination","searchHandle","value","isSearching","trim","length","then","resp","respData","data","map","isMapVisible","dataSource","console","log","catch","err","message","error","finally","searchSuggestion","suburbList","handleMapClick","i","newDataSource","handleModalOk","handleModalCancel","spinning","lg","span","offset","md","bordered","marginTop","title","size","filterOption","inputValue","option","children","toUpperCase","indexOf","prefix","type","placeholder","onSearch","enterButton","grid","column","renderItem","Item","hoverable","gutter","cover","src","image","alt","overflow","fontWeight","streetNumber","roadName","roadType","postcode","className","onClick","bind","faMapMarked","visible","onOk","onCancel","footer"],"mappings":"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","file":"static/js/10.ea4e018e.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst service = axios.create({\n    baseURL: \"http://api.age50vaccine.ml\"\n})\n\n// const googleSearchService = axios.create({\n//     baseURL: \"https://www.googleapis.com/customsearch\"\n// })\n\n//get hospitals by suburb\nexport const getHospitalsBySuburb = (suburb) =>{\n    return service.get(`/hospital/findBySuburb/${suburb}`)\n}\n\n// //searchImageURL\n// export const getHospitalImageURL = (hospitalName) =>{\n//     return googleSearchService.get(`v1?key=YourKey&cx=010857273807497535145:avarjzi-g-i&q=${hospitalName}&num=1&searchType=image`)\n// }\n\n\nexport const getSuburbList = () => {\n    return service.get(`/hospital/findAllSuburb`)\n}","import React, { Component } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faMapMarkerAlt} from '@fortawesome/free-solid-svg-icons'\n\nconst MapMarker = () => <FontAwesomeIcon  icon={faMapMarkerAlt} style={{fontSize:\"24px\", color:\"red\"}} />\n\nexport default class GoogleMap extends Component {\n    constructor(){\n        super()\n        this.state ={\n            zoom: 13\n        }\n    }\n\n    // defaultCenter = {\n    //     center: {\n    //       lat: this.props.latitude,\n    //       lng: this.props.longitude\n    //     },\n    //     zoom: 13\n    //   };\n    \n    componentDidMount(){\n        this.setState({\n            center : {\n                lat : this.props.item.latitude,\n                lng : this.props.item.longitude\n            },\n            name : this.props.item.name\n        })\n    }\n\n    //   renderMarkers = (map, maps) => {\n    //     let marker = new maps.Marker({\n    //       position: this.state.center,\n    //       map,\n    //       title: this.state.name,\n    //     });\n    //   }\n\n    render() {\n        // console.log(this.props)\n        return (\n            // <div></div>\n            <div style={{ height: '50vh', width: '90%', margin:\"auto\", marginBottom:\"24px\"}}>\n                <GoogleMapReact\n                bootstrapURLKeys={{ key: \"AIzaSyC73kt0rEvtd2U-QKDGrEYvbV1S-dlX0EI\"}}\n                defaultCenter={this.state.center}\n                defaultZoom={this.state.zoom}\n                // onGoogleApiLoaded={({map, maps}) => this.renderMarkers(map, maps)}\n                >\n                <MapMarker\n                    lat={this.props.item.latitude}\n                    // -37.877093, 145.044425\n                    lng={this.props.item.longitude}\n                />\n                </GoogleMapReact>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Input, Col ,Row, Card, Icon, Spin, List,Tag, message, Modal, AutoComplete} from 'antd';\nimport { getHospitalsBySuburb, getSuburbList } from '../../requests'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faMapMarked} from '@fortawesome/free-solid-svg-icons'\nimport GoogleMap from './GoogleMap'\nimport './index.css'\n\n\nconst { Search } = Input;\n\n\nexport default class Vaccination extends Component {\n\n    constructor(){\n        super()\n        this.state={\n            isSearching: false,\n            value: '',\n            suburbList: []\n        }\n    }\n\n\n    searchHandle = (value) => {\n        this.setState({\n            isSearching: true\n        })  \n        // console.log(value)\n        if(value.trim().length>0){\n            getHospitalsBySuburb(value)\n            .then(resp => {\n                const respData = resp.data\n                respData.map( item => {\n                    item.isMapVisible = false\n                    return item\n                })\n                this.setState({\n                    dataSource: respData\n                })\n                console.log(this.state.dataSource)\n            })\n            .catch(err => {\n            // deal with error\n                message.error(err)\n            })\n            .finally(() => {\n            this.setState({\n                isSearching: false\n                })\n            })     \n        }else{\n            message.error(\"Please enter some words in input area!\")\n            this.setState({\n                isSearching: false\n                }) \n        }\n        \n    }\n\n    searchSuggestion = () => {\n        getSuburbList()\n            .then(resp => {\n                const respData = resp.data\n                console.log(respData)\n                this.setState({\n                    suburbList : respData\n                })\n            })\n            .catch(err => {\n            // deal with error\n                message.error(err)\n            })\n            .finally(() => {\n                // console.log()\n            })     \n    }\n\n    componentDidMount(){\n        this.searchSuggestion()\n        console.log(this.state.suburbList)\n    }\n\n\n    handleMapClick = (i) => {\n        const newDataSource = this.state.dataSource\n        newDataSource[i].isMapVisible = true\n        this.setState({\n            dataSource: newDataSource\n        })\n        // console.log(this.state.dataSource)\n    }\n\n    handleModalOk = (i) => {\n        const newDataSource = this.state.dataSource\n        newDataSource[i].isMapVisible = false\n        this.setState({\n            dataSource: newDataSource\n        })\n        // console.log(this.state.dataSource)\n    }\n\n    handleModalCancel = (i) => {\n        const newDataSource = this.state.dataSource\n        newDataSource[i].isMapVisible = false\n        this.setState({\n            dataSource: newDataSource\n        })\n    }\n\n    render() {\n        return (\n            <Spin spinning= {this.state.isSearching}>\n            <div>\n                \n                <Col lg={{span:12, offset:6}} md = {{span: 22, offset:1}} >\n                    <Card\n                        bordered = {false}\n                        style = {{marginTop:'8px'}}\n                        title = \"Find a clinic or hospital!\"\n                    >\n                    <Row >\n                    <AutoComplete \n                        style={{width:\"100%\"}}\n                        size=\"large\"\n                        dataSource={this.state.suburbList}\n                        filterOption={(inputValue, option) =>\n                            option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                          }\n                        // onSearch={this.searchHandle} \n                        // onSelect={onSelect}\n                    >\n                    <Search \n                        prefix={<Icon type=\"search\" />}\n                        placeholder=\"input region name (like kingston, monash)\" \n                        size=\"large\"\n                        onSearch={this.searchHandle} \n                        \n                        enterButton  = \"Search\"\n                    />\n                    </AutoComplete>\n                    {/* <div style={{align:'left', border:'1px solid #A5ACB2'}}>aaaaa</div>  */}\n                    </Row> \n\n                    </Card>  \n                </Col>\n\n                <Col span={12} offset={6} style={{marginTop:'16px'}}>\n                <List\n                    grid={{column: 1}}\n                    dataSource = {this.state.dataSource}\n                    renderItem = {\n                        (item,i) => (\n                            <List.Item>\n                                <Card \n                                    hoverable\n                                >\n                                <Row gutter={16}>\n                                <Col\n                                    span = {6}\n                                >\n                                    <Card\n                                        cover={<img src={item.image}  alt={item.name} style={{overflow:\"hidden\"}} />}\n                                        bordered = {false}\n                                    >\n                                    </Card>\n                                </Col>\n                                 <Col\n                                    span = {14}\n                                >\n                                    <p style={{marginBottom:'8px', fontSize:'16px', fontWeight:'bold'}}>\n                                    {item.name} \n                                    </p>\n                                    <p>\n                                        <Tag color={item.type === \"private\"?\"#87d068\":\"#108ee9\"}>{item.type}</Tag>\n                                    </p>\n                                    <p style={{marginTop:'8px'}}>\n                                        {item.streetNumber} {item.roadName} {item.roadType}, {item.suburb} {item.postcode}, {item.state}\n                                    </p>\n                                </Col>\n                                <Col\n                                    span = {4}\n                                >\n                                    <div className={\"mapIcon\"} onClick={this.handleMapClick.bind(this, i)}><FontAwesomeIcon  icon={faMapMarked}  /> Map </div>\n                                </Col>\n                                </Row>\n                                <Modal\n                                    visible={this.state.dataSource[i].isMapVisible}\n                                    title={item.name}\n                                    onOk={this.handleModalOk.bind(this, i)}\n                                    onCancel={this.handleModalCancel.bind(this, i)}\n                                    footer={null}\n                                >\n                                    <GoogleMap item = {item} />\n                                </Modal>\n                                </Card>\n                            </List.Item>\n                        )\n                    }\n                >\n                </List>\n                </Col>\n                \n            </div>\n            </Spin>\n        )\n    }\n}\n"],"sourceRoot":""}