{"version":3,"sources":["views/Account/Edit.js","../node_modules/rc-util/es/Children/toArray.js"],"names":["Option","MonthPicker","Edit","getItemData","setState","isLoading","getGrandparentById","props","match","params","id","then","resp","data","form","setFieldsValue","email","name","relationship","lastVaccineDate","moment","phoneNumber","finally","handleSubmit","e","preventDefault","validateFields","err","values","currentYear","Date","getFullYear","year","format","date","isUpdating","user","location","state","userid","newGrandparentInfo","JSON","stringify","updateGrandparent","success","history","push","pathname","error","validateToPhoneNumber","rule","value","callback","console","log","test","this","getFieldDecorator","prefixSelector","initialValue","style","width","lg","span","offset","md","marginTop","marginBottom","maxWidth","margin","textAlign","fontWeight","fontSize","spinning","labelCol","xs","sm","wrapperCol","onSubmit","Item","label","rules","type","message","required","disabled","whitespace","title","validator","addonBefore","placeholder","htmlType","loading","Component","create","withRouter","toArray","children","ret","Children","forEach","c"],"mappings":"0ZAMQA,E,IAAAA,OACAC,E,IAAAA,YACFC,E,YACF,aAAc,IAAD,8BACT,+CAOJC,YAAc,WACV,EAAKC,SAAS,CACVC,WAAW,IAEfC,YAAmB,EAAKC,MAAMC,MAAMC,OAAOC,IACtCC,KAAK,SAAAC,GACCA,EAAKC,MAGJ,EAAKN,MAAMO,KAAKC,eAAe,CAC3BC,MAAOJ,EAAKC,KAAKG,MACjBC,KAAML,EAAKC,KAAKI,KAChBC,aAAcN,EAAKC,KAAKK,aACxBC,gBAAiBC,IAAOR,EAAKC,KAAKM,gBAAiB,cACnDE,YAAcT,EAAKC,KAAKQ,gBAKnCC,QAAQ,WACL,EAAKlB,SAAS,CACVC,WAAW,OA7Bd,EAkCbkB,aAAe,SAACC,GAEZA,EAAEC,iBACF,EAAKlB,MAAMO,KAAKY,eAAe,SAACC,EAAKC,GACjC,IAAKD,EAAK,CAEN,IAAME,GAAc,IAAIC,MAAOC,cAC5BH,EAAM,gBAAoBI,OAASH,EAClCD,EAAM,gBAAsBR,MAASa,OAAO,cAE5CL,EAAM,gBAAN,UAA+BC,EAAY,EAA3C,UAGJ,IAAMK,EAAON,EAAM,gBAAoBK,OAAO,cAC9CL,EAAM,gBAAsBM,EAC5B,EAAK9B,SAAS,CACV+B,YAAY,IAEhB,IAAMC,EAAO,CAAC1B,GAAI,EAAKH,MAAM8B,SAASC,MAAMC,QAC5CX,EAAOW,OAASH,EAChBR,EAAOlB,GAAK,EAAKH,MAAMC,MAAMC,OAAOC,GACpC,IAAM8B,EAAqBC,KAAKC,UAAUd,GAC1Ce,YAAkBH,GACb7B,KAAK,SAAAC,GACCA,EAAKC,MACJ,IAAQ+B,QAAQ,kCAChB,EAAKrC,MAAMsC,QAAQC,KAAK,CACpBC,SAAS,cAGb,IAAQC,MAAM,uBAGrB1B,QAAQ,WACL,EAAKlB,SAAS,CACV+B,YAAY,UArEvB,EA4Ebc,sBAAwB,SAACC,EAAMC,EAAOC,GAElCC,QAAQC,IAAI,OADS,YAEJC,KAAKJ,IAIlBE,QAAQC,IAAI,OACZF,MAJAC,QAAQC,IAAI,OACZF,EAAS,+DA/Eb,EAAKd,MAAO,CACRjC,WAAW,EACX8B,YAAY,GAJP,E,iFAyFTqB,KAAKrD,gB,+BAOL,IAGQsD,EAAsBD,KAAKjD,MAAMO,KAAjC2C,kBACFC,EAAiBD,EAAkB,SAAU,CAC/CE,aAAc,MADKF,CAGnB,uBAAQG,MAAO,CAAEC,MAAO,KACtB,kBAAC7D,EAAD,CAAQmD,MAAM,MAAd,SA0BN,OACI,6BACI,uBAAKW,GAAI,CAACC,KAAK,GAAIC,OAAO,GAAIC,GAAM,CAACF,KAAM,GAAIC,OAAO,GAAIJ,MAAO,CAACM,UAAU,OAAQC,aAAa,SACjG,uBACIP,MAAO,CAACQ,SAAU,QAASC,OAAQ,SAEnC,yBAAKT,MAAO,CAACU,UAAU,SAAUC,WAAW,OAAQC,SAAU,OAAQL,aAAa,SAAnF,uCACA,uBAAMM,SAAUjB,KAAKlB,MAAMjC,WAC/B,uCA/Be,CACnBqE,SAAU,CACNC,GAAI,CAAEZ,KAAM,IACZa,GAAI,CAAEb,KAAM,IAEhBc,WAAY,CACRF,GAAI,CAAEZ,KAAM,IACZa,GAAI,CAAEb,KAAM,MAwBZ,CAA0Be,SAAUtB,KAAKjC,eACrC,sBAAMwD,KAAN,CAAWC,MAAM,UAChBvB,EAAkB,QAAS,CACxBwB,MAAO,CACP,CACIC,KAAM,QACNC,QAAS,kCAEb,CACIC,UAAU,EACVD,QAAS,+BARhB1B,CAWE,uBAAO4B,SAAY7B,KAAKlB,MAAMH,eAEjC,sBAAM4C,KAAN,CACAC,MAAM,QAELvB,EAAkB,OAAQ,CACvBwB,MAAO,CAAC,CAAEG,UAAU,EAAMD,QAAS,qBAAsBG,YAAY,KADxE7B,CAEE,uBAAO4B,SAAY7B,KAAKlB,MAAMH,eAEjC,sBAAM4C,KAAN,CACAC,MACI,iDAEA,uBAASO,MAAM,wCACX,uBAAML,KAAK,yBAKlBzB,EAAkB,eAAgB,CAC/BwB,MAAO,CAAC,CAAEG,UAAU,EAAMD,QAAS,6BAA8BG,YAAY,KADhF7B,CAEE,uBAAO4B,SAAY7B,KAAKlB,MAAMH,eAEjC,sBAAM4C,KAAN,CACIC,MACI,mDAEA,uBAASO,MAAM,6DACf,uBAAML,KAAK,yBAKdzB,EAAkB,kBAxFpB,CACXwB,MAAO,CAAC,CAAEC,KAAM,SAAUE,UAAU,EAAMD,QAAS,yBAuFtC1B,CAA6C,kBAACxD,EAAD,QAElD,sBAAM8E,KAAN,CAAWC,MAAM,gBACZvB,EAAkB,cAAe,CAClCwB,MAAO,CAAC,CAAEG,UAAU,EAAMD,QAAS,mCAAqC,CAAEK,UAAWhC,KAAKP,yBADzFQ,CAEE,uBAAOgC,YAAa/B,EAAgBgC,YAAY,gBAAgB9B,MAAO,CAAEC,MAAO,YAEvF,sBAAMkB,KA1ES,CAC3BF,WAAY,CACRF,GAAI,CACJZ,KAAM,GACNC,OAAQ,GAERY,GAAI,CACJb,KAAM,GACNC,OAAQ,KAmEA,uBAAQkB,KAAK,UAAUS,SAAS,SAASC,QAASpC,KAAKlB,MAAMH,YAA7D,oB,GAjMD0D,aA8MJ,cAAKC,OAAO,CAAE7E,KAAM,mBAApB,CAAyC8E,YAAW7F,K,iCCtNnE,oDACe,SAAS8F,EAAQC,GAC9B,IAAIC,EAAM,GAIV,OAHA,IAAMC,SAASC,QAAQH,EAAU,SAAUI,GACzCH,EAAIpD,KAAKuD,KAEJH","file":"static/js/17.4dbffd56.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { getGrandparentById, updateGrandparent } from '../../requests'\nimport { Form, Input, Tooltip, Icon, Col, Button, Card, message, Spin, DatePicker,Select } from 'antd'\nimport { withRouter } from 'react-router-dom'\nimport moment from 'moment';\n\nconst { Option } = Select;\nconst { MonthPicker } = DatePicker\nclass Edit extends Component {\n    constructor(){\n        super()\n        this.state= {\n            isLoading: false,\n            isUpdating: false\n        }\n    }\n\n    getItemData = ()=>{\n        this.setState({\n            isLoading: true\n        })\n        getGrandparentById(this.props.match.params.id)\n            .then(resp => {\n                if(resp.data){\n                    // console.log(resp.data)\n                    // console.log(this.props.form)\n                    this.props.form.setFieldsValue({\n                        email: resp.data.email,\n                        name: resp.data.name,\n                        relationship: resp.data.relationship,\n                        lastVaccineDate: moment(resp.data.lastVaccineDate, \"YYYY-MM-DD\"),\n                        phoneNumber : resp.data.phoneNumber\n                        // receiveNotification: resp.data.receiveNotification\n                    })\n                }\n            })\n            .finally(()=>{\n                this.setState({\n                    isLoading: false\n                })\n            })\n    }\n\n    handleSubmit = (e) =>{\n        // console.log(e)\n        e.preventDefault()\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                const currentYear = new Date().getFullYear()\n                if(values[\"lastVaccineDate\"].year() < currentYear){\n                    values[\"nextVaccineDate\"] = moment().format('YYYY-MM-DD')\n                }else{\n                    values[\"nextVaccineDate\"] = `${currentYear+1}-04-01`\n                }\n                // console.log(values[\"nextVaccineDate\"])\n                const date = values['lastVaccineDate'].format(\"YYYY-MM-01\")\n                values[\"lastVaccineDate\"] = date\n                this.setState({\n                    isUpdating: true\n                })\n                const user = {id: this.props.location.state.userid}\n                values.userid = user\n                values.id = this.props.match.params.id\n                const newGrandparentInfo = JSON.stringify(values)\n                updateGrandparent(newGrandparentInfo)\n                    .then(resp => {\n                        if(resp.data){\n                            message.success(\"You have updated successfully!\")\n                            this.props.history.push({\n                                pathname: `/account`,\n                            })\n                        }else{\n                            message.error(\"Failed to update!\")\n                        }\n                    })\n                    .finally(()=>{\n                        this.setState({\n                            isUpdating: false\n                        })\n                    })\n            }\n        })\n    }\n\n    validateToPhoneNumber = (rule, value, callback) => {\n        const phonePattern = /^04\\d{8}$/\n        console.log(\"111\")\n        if(!phonePattern.test(value)){\n            console.log(\"222\")\n            callback('You should input legal phone number! Such as: 0413174686 ');\n        }else{\n            console.log(\"333\")\n            callback()\n        }\n    }\n\n    componentDidMount(){\n        this.getItemData()\n    }\n\n    render() {\n        // console.log(this.props.match.params.id)\n        // console.log(this.props.location.state.userid)\n        // console.log(this.props)\n        const config = {\n            rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n        };\n        const { getFieldDecorator } = this.props.form;\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '61',\n          })(\n            <Select style={{ width: 70 }}>\n              <Option value=\"61\">+61</Option>\n            </Select>,\n          )\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n            };\n        const tailFormItemLayout = {\n        wrapperCol: {\n            xs: {\n            span: 24,\n            offset: 0,\n            },\n            sm: {\n            span: 16,\n            offset: 8,\n            },\n            },\n        };\n\n        return (\n            <div>\n                <Col lg={{span:12, offset:6}} md = {{span: 22, offset:1}} style={{marginTop:\"24px\", marginBottom:\"24px\"}}>\n                <Card \n                    style={{maxWidth: \"500px\", margin: \"auto\"}}\n                >\n                    <div style={{textAlign:\"center\", fontWeight:\"bold\", fontSize: \"24px\", marginBottom:\"20px\"}}>Update your grandparent information</div>\n                    <Spin spinning={this.state.isLoading}>\n                <Form {...formItemLayout} onSubmit={this.handleSubmit} >\n                    <Form.Item label=\"E-mail\" >\n                    {getFieldDecorator('email', {\n                        rules: [\n                        {\n                            type: 'email',\n                            message: 'The input is not valid E-mail!',\n                        },\n                        {\n                            required: true,\n                            message: 'Please input your E-mail!',\n                        },\n                        ],\n                    })(<Input disabled = {this.state.isUpdating} />)}\n                    </Form.Item>\n                    <Form.Item\n                    label='name'\n                    >\n                    {getFieldDecorator('name', {\n                        rules: [{ required: true, message: 'Please input name!', whitespace: true }],\n                    })(<Input disabled = {this.state.isUpdating}/>)}\n                    </Form.Item>\n                    <Form.Item\n                    label={\n                        <span>\n                        Relationship&nbsp;\n                        <Tooltip title=\"What`s the relationship with he/she?\">\n                            <Icon type=\"question-circle-o\" />\n                        </Tooltip>\n                        </span>\n                    }\n                    >\n                    {getFieldDecorator('relationship', {\n                        rules: [{ required: true, message: 'Please input relationship!', whitespace: true }],\n                    })(<Input disabled = {this.state.isUpdating}/>)}\n                    </Form.Item>\n                    <Form.Item \n                        label={\n                            <span>\n                            Vaccine record&nbsp;\n                            <Tooltip title=\"When was the last tiem that the person took the flu shot?\">\n                            <Icon type=\"question-circle-o\" />\n                            </Tooltip>\n                            </span>\n                        }\n                    >\n                        {getFieldDecorator('lastVaccineDate', config)(<MonthPicker />)}\n                    </Form.Item>\n                    <Form.Item label=\"Phone Number\">\n                        {getFieldDecorator('phoneNumber', {\n                        rules: [{ required: true, message: 'Please input your phone number!' }, { validator: this.validateToPhoneNumber }],\n                        })(<Input addonBefore={prefixSelector} placeholder=\"eg.0431374686\" style={{ width: '100%' }} />)}\n                    </Form.Item>\n                    <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={this.state.isUpdating}>\n                        Update\n                    </Button>\n                    </Form.Item>\n                </Form>\n                </Spin>\n                </Card>\n            </Col>\n            </div>\n        )\n    }\n}\n\nexport default Form.create({ name: 'editGrandparent' })(withRouter(Edit)) ","import React from 'react';\nexport default function toArray(children) {\n  var ret = [];\n  React.Children.forEach(children, function (c) {\n    ret.push(c);\n  });\n  return ret;\n}"],"sourceRoot":""}